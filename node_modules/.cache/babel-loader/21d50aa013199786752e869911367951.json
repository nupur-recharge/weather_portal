{"ast":null,"code":"var _jsxFileName = \"/home/nupur.majumar/Desktop/weather_portal/src/component/weatherForcast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Collapse } from \"antd\";\nimport { getWeather } from \"../API/api-services\";\nimport DropDown from \"./share/dropdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Panel\n} = Collapse;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nconst CurrentWeatherForcst = _ref => {\n  _s();\n\n  let {} = _ref;\n  const [curentItem, setCurentItem] = useState([\"current\"]);\n  const [dailyItem, setDailyItem] = useState([]);\n  const [header, setHeader] = useState(\"current\");\n  const [location, setLocation] = useState(\"\");\n  const [cloudes, setCloudes] = useState(\"\");\n  const [temp, setTemp] = useState(\"\");\n  const [windSpeed, setwindSpeed] = useState(\"\");\n  const [sunset, setSunset] = useState(\"\");\n  const [sunrise, setSunrise] = useState(\"\");\n  const [currWeatherData, setcurrWeatherData] = useState(\"\");\n  const [dailyWeatherData, setcurrdailyWeatherData] = useState(\"\");\n\n  const callbackForMenu = data => {\n    console.log(\"data\", data);\n    setHeader(data.key);\n  };\n\n  const GetDaYForDalilyData = (n, d) => {\n    let day;\n\n    switch (n) {\n      case 0:\n        day = \"Sunday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 1:\n        day = \"Monday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 2:\n        day = \"Tuesday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 3:\n        day = \"Wednesday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 4:\n        day = \"Thursday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 5:\n        day = \"Friday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 6:\n        day = \"Saturday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n    }\n  };\n\n  const success = position => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    let ItemArray = [];\n    let queryParams = {};\n    queryParams.lat = latitude;\n    queryParams.lon = longitude;\n    let d;\n    let n;\n    let day;\n    getWeather(queryParams).then(response => {\n      setLocation(response.data.timezone);\n      response.data.daily.map((result, i) => {\n        d = new Date(result.dt * 1000);\n        n = d.getDay();\n        day = GetDaYForDalilyData(n, d);\n\n        if (i !== 7) {\n          ItemArray.push(day);\n        }\n      }); // setItem(response.data.current.daily)\n\n      setDailyItem(ItemArray);\n      setTemp(Math.round(response.data.current.temp));\n      setCloudes(response.data.current.clouds);\n      setwindSpeed(response.data.current.wind_speed);\n      console.log(\"response\", Math.round(response.data.current.temp));\n      console.log(\"ItemArray\", ItemArray);\n    }).catch(error => {\n      console.log(error);\n    });\n    console.log(latitude, longitude);\n  };\n\n  const error = () => {\n    alert(\"Unable to retrieve your location\");\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(success, error);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DropDown, {\n      DropDownText: \"Current\",\n      Item: curentItem,\n      callbackForMenu: data => {\n        callbackForMenu(data);\n      }\n    }, \"current\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n      DropDownText: \"Daily\",\n      Item: dailyItem\n    }, \"daily\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n      DropDownText: \"Weekly\"\n    }, \"weekly\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      onChange: callback,\n      children: header === \"current\" && /*#__PURE__*/_jsxDEV(Panel, {\n        header: header[0].toUpperCase() + header.slice(1).toLowerCase(),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"temp\" + \" \" + temp + \"C\" + \"  \" + \"Cloude\" + \" \" + cloudes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, \"2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CurrentWeatherForcst, \"BO2+ZxIZaa0RqOkYw4Z8fkRkcQA=\");\n\n_c = CurrentWeatherForcst;\nexport default CurrentWeatherForcst;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentWeatherForcst\");","map":{"version":3,"sources":["/home/nupur.majumar/Desktop/weather_portal/src/component/weatherForcast.js"],"names":["React","useEffect","useState","Collapse","getWeather","DropDown","Panel","callback","key","console","log","text","CurrentWeatherForcst","curentItem","setCurentItem","dailyItem","setDailyItem","header","setHeader","location","setLocation","cloudes","setCloudes","temp","setTemp","windSpeed","setwindSpeed","sunset","setSunset","sunrise","setSunrise","currWeatherData","setcurrWeatherData","dailyWeatherData","setcurrdailyWeatherData","callbackForMenu","data","GetDaYForDalilyData","n","d","day","String","getDate","padStart","success","position","latitude","coords","longitude","ItemArray","queryParams","lat","lon","then","response","timezone","daily","map","result","i","Date","dt","getDay","push","Math","round","current","clouds","wind_speed","catch","error","alert","navigator","geolocation","getCurrentPosition","toUpperCase","slice","toLowerCase"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,QAAP,MAAqB,kBAArB;;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYH,QAAlB;;AACA,SAASI,QAAT,CAAkBC,GAAlB,EAAuB;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AACD,MAAMG,IAAI,GAAI;AACd;AACA;AACA;AACA,CAJA;;AAKA,MAAMC,oBAAoB,GAAG,QAAQ;AAAA;;AAAA,MAAP,EAAO;AACnC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,CAAC,SAAD,CAAD,CAA5C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,SAAD,CAApC;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACmB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACqB,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACuB,SAAD,EAAYC,YAAZ,IAA4BxB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC2B,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC,EAAD,CAAtC;AAGA,QAAM,CAAC6B,eAAD,EAAkBC,kBAAlB,IAAwC9B,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAC+B,gBAAD,EAAmBC,uBAAnB,IAA8ChC,QAAQ,CAAC,EAAD,CAA5D;;AAEA,QAAMiC,eAAe,GAAIC,IAAD,IAAU;AAChC3B,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB0B,IAApB;AACAlB,IAAAA,SAAS,CAACkB,IAAI,CAAC5B,GAAN,CAAT;AACD,GAHD;;AAKA,QAAM6B,mBAAmB,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpC,QAAIC,GAAJ;;AACA,YAAQF,CAAR;AACE,WAAK,CAAL;AACEE,QAAAA,GAAG,GAAG,WAAW,GAAX,GAAiBC,MAAM,CAACF,CAAC,CAACG,OAAF,EAAD,CAAN,CAAoBC,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAvB;AACA,eAAOH,GAAP;;AACF,WAAK,CAAL;AACEA,QAAAA,GAAG,GAAG,WAAW,GAAX,GAAiBC,MAAM,CAACF,CAAC,CAACG,OAAF,EAAD,CAAN,CAAoBC,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAvB;AACA,eAAOH,GAAP;;AACF,WAAK,CAAL;AACEA,QAAAA,GAAG,GAAG,YAAY,GAAZ,GAAkBC,MAAM,CAACF,CAAC,CAACG,OAAF,EAAD,CAAN,CAAoBC,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAxB;AACA,eAAOH,GAAP;;AACF,WAAK,CAAL;AACEA,QAAAA,GAAG,GAAG,cAAc,GAAd,GAAoBC,MAAM,CAACF,CAAC,CAACG,OAAF,EAAD,CAAN,CAAoBC,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAA1B;AACA,eAAOH,GAAP;;AACF,WAAK,CAAL;AACEA,QAAAA,GAAG,GAAG,aAAa,GAAb,GAAmBC,MAAM,CAACF,CAAC,CAACG,OAAF,EAAD,CAAN,CAAoBC,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAzB;AACA,eAAOH,GAAP;;AACF,WAAK,CAAL;AACEA,QAAAA,GAAG,GAAG,WAAW,GAAX,GAAiBC,MAAM,CAACF,CAAC,CAACG,OAAF,EAAD,CAAN,CAAoBC,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAvB;AACA,eAAOH,GAAP;;AACF,WAAK,CAAL;AACEA,QAAAA,GAAG,GAAG,aAAa,GAAb,GAAmBC,MAAM,CAACF,CAAC,CAACG,OAAF,EAAD,CAAN,CAAoBC,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAzB;AACA,eAAOH,GAAP;AArBJ;AAuBD,GAzBD;;AA2BA,QAAMI,OAAO,GAAIC,QAAD,IAAc;AAC5B,UAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAT,CAAgBD,QAAjC;AACA,UAAME,SAAS,GAAGH,QAAQ,CAACE,MAAT,CAAgBC,SAAlC;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,WAAW,GAAG,EAAlB;AACAA,IAAAA,WAAW,CAACC,GAAZ,GAAkBL,QAAlB;AACAI,IAAAA,WAAW,CAACE,GAAZ,GAAkBJ,SAAlB;AACA,QAAIT,CAAJ;AACA,QAAID,CAAJ;AACA,QAAIE,GAAJ;AACApC,IAAAA,UAAU,CAAC8C,WAAD,CAAV,CACGG,IADH,CACSC,QAAD,IAAc;AAClBlC,MAAAA,WAAW,CAACkC,QAAQ,CAAClB,IAAT,CAAcmB,QAAf,CAAX;AACAD,MAAAA,QAAQ,CAAClB,IAAT,CAAcoB,KAAd,CAAoBC,GAApB,CAAwB,CAACC,MAAD,EAASC,CAAT,KAAe;AACrCpB,QAAAA,CAAC,GAAG,IAAIqB,IAAJ,CAASF,MAAM,CAACG,EAAP,GAAY,IAArB,CAAJ;AACAvB,QAAAA,CAAC,GAAGC,CAAC,CAACuB,MAAF,EAAJ;AACAtB,QAAAA,GAAG,GAAGH,mBAAmB,CAACC,CAAD,EAAIC,CAAJ,CAAzB;;AACA,YAAIoB,CAAC,KAAK,CAAV,EAAa;AACXV,UAAAA,SAAS,CAACc,IAAV,CAAevB,GAAf;AACD;AACF,OAPD,EAFkB,CAUlB;;AACAxB,MAAAA,YAAY,CAACiC,SAAD,CAAZ;AACAzB,MAAAA,OAAO,CAACwC,IAAI,CAACC,KAAL,CAAWX,QAAQ,CAAClB,IAAT,CAAc8B,OAAd,CAAsB3C,IAAjC,CAAD,CAAP;AACAD,MAAAA,UAAU,CAACgC,QAAQ,CAAClB,IAAT,CAAc8B,OAAd,CAAsBC,MAAvB,CAAV;AACAzC,MAAAA,YAAY,CAAC4B,QAAQ,CAAClB,IAAT,CAAc8B,OAAd,CAAsBE,UAAvB,CAAZ;AACA3D,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBsD,IAAI,CAACC,KAAL,CAAWX,QAAQ,CAAClB,IAAT,CAAc8B,OAAd,CAAsB3C,IAAjC,CAAxB;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBuC,SAAzB;AACD,KAlBH,EAmBGoB,KAnBH,CAmBUC,KAAD,IAAW;AAChB7D,MAAAA,OAAO,CAACC,GAAR,CAAY4D,KAAZ;AACD,KArBH;AAuBA7D,IAAAA,OAAO,CAACC,GAAR,CAAYoC,QAAZ,EAAsBE,SAAtB;AACD,GAlCD;;AAmCA,QAAMsB,KAAK,GAAG,MAAM;AAClBC,IAAAA,KAAK,CAAC,kCAAD,CAAL;AACD,GAFD;;AAIAtE,EAAAA,SAAS,CAAC,MAAM;AACduE,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC9B,OAAzC,EAAkD0B,KAAlD;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,QAAD;AAEE,MAAA,YAAY,EAAC,SAFf;AAGE,MAAA,IAAI,EAAEzD,UAHR;AAIE,MAAA,eAAe,EAAGuB,IAAD,IAAU;AACzBD,QAAAA,eAAe,CAACC,IAAD,CAAf;AACD;AANH,OACM,SADN;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,QAAD;AAAsB,MAAA,YAAY,EAAC,OAAnC;AAA2C,MAAA,IAAI,EAAErB;AAAjD,OAAc,OAAd;AAAA;AAAA;AAAA;AAAA,YATF,eAUE,QAAC,QAAD;AAAuB,MAAA,YAAY,EAAC;AAApC,OAAc,QAAd;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAA,gBAAKI;AAAL;AAAA;AAAA;AAAA;AAAA,YAXF,eAaE,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEZ,QAApB;AAAA,gBACGU,MAAM,KAAK,SAAX,iBACC,QAAC,KAAD;AAAO,QAAA,MAAM,EAAEA,MAAM,CAAC,CAAD,CAAN,CAAU0D,WAAV,KAA0B1D,MAAM,CAAC2D,KAAP,CAAa,CAAb,EAAgBC,WAAhB,EAAzC;AAAA,+BACE;AAAA,oBAAI,SAAS,GAAT,GAActD,IAAd,GAAqB,GAArB,GAAyB,IAAzB,GAA8B,QAA9B,GAAwC,GAAxC,GAA8CF;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF,SAA4E,GAA5E;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA,kBADF;AA6BD,CAvHD;;GAAMT,oB;;KAAAA,oB;AAwHN,eAAeA,oBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Collapse } from \"antd\";\nimport { getWeather } from \"../API/api-services\";\nimport DropDown from \"./share/dropdown\";\nconst { Panel } = Collapse;\nfunction callback(key) {\n  console.log(key);\n}\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\nconst CurrentWeatherForcst = ({}) => {\n  const [curentItem, setCurentItem] = useState([\"current\"]);\n  const [dailyItem, setDailyItem] = useState([]);\n  const [header, setHeader] = useState(\"current\");\n  const [location, setLocation] = useState(\"\");\n  const [cloudes, setCloudes] = useState(\"\");\n  const [temp, setTemp] = useState(\"\");\n  const [windSpeed, setwindSpeed] = useState(\"\");\n  const [sunset, setSunset] = useState(\"\");\n  const [sunrise, setSunrise] = useState(\"\");\n\n\n  const [currWeatherData, setcurrWeatherData] = useState(\"\");\n  const [dailyWeatherData, setcurrdailyWeatherData] = useState(\"\");\n\n  const callbackForMenu = (data) => {\n    console.log(\"data\", data);\n    setHeader(data.key);\n  };\n\n  const GetDaYForDalilyData = (n, d) => {\n    let day;\n    switch (n) {\n      case 0:\n        day = \"Sunday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 1:\n        day = \"Monday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 2:\n        day = \"Tuesday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 3:\n        day = \"Wednesday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 4:\n        day = \"Thursday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 5:\n        day = \"Friday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 6:\n        day = \"Saturday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n    }\n  };\n\n  const success = (position) => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    let ItemArray = [];\n    let queryParams = {};\n    queryParams.lat = latitude;\n    queryParams.lon = longitude;\n    let d;\n    let n;\n    let day;\n    getWeather(queryParams)\n      .then((response) => {\n        setLocation(response.data.timezone);\n        response.data.daily.map((result, i) => {\n          d = new Date(result.dt * 1000);\n          n = d.getDay();\n          day = GetDaYForDalilyData(n, d);\n          if (i !== 7) {\n            ItemArray.push(day);\n          }\n        });\n        // setItem(response.data.current.daily)\n        setDailyItem(ItemArray);\n        setTemp(Math.round(response.data.current.temp))\n        setCloudes(response.data.current.clouds)\n        setwindSpeed(response.data.current.wind_speed)\n        console.log(\"response\", Math.round(response.data.current.temp));\n        console.log(\"ItemArray\", ItemArray);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    console.log(latitude, longitude);\n  };\n  const error = () => {\n    alert(\"Unable to retrieve your location\");\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(success, error);\n  }, []);\n\n  return (\n    <>\n      <DropDown\n        key=\"current\"\n        DropDownText=\"Current\"\n        Item={curentItem}\n        callbackForMenu={(data) => {\n          callbackForMenu(data);\n        }}\n      />\n      <DropDown key=\"daily\" DropDownText=\"Daily\" Item={dailyItem} />\n      <DropDown key=\"weekly\" DropDownText=\"Weekly\" />\n      <h3>{location}</h3>\n\n      <Collapse onChange={callback}>\n        {header === \"current\" && (\n          <Panel header={header[0].toUpperCase() + header.slice(1).toLowerCase()} key=\"2\">\n            <p>{\"temp\" + \" \"+ temp + \"C\"+\"  \"+\"Cloude\"+ \" \" + cloudes }</p>\n          </Panel>\n        )}\n        {/* <Panel header=\"This is panel header 2\" key=\"2\">\n          <p>{text}</p>\n        </Panel>\n        <Panel header=\"This is panel header 3\" key=\"3\">\n          <p>{text}</p>\n        </Panel> */}\n      </Collapse>\n    </>\n  );\n};\nexport default CurrentWeatherForcst;\n"]},"metadata":{},"sourceType":"module"}