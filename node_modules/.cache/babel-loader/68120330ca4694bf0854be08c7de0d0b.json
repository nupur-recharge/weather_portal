{"ast":null,"code":"var _jsxFileName = \"/home/nupur/Desktop/weather_portal/src/component/weatherForcast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Collapse } from \"antd\";\nimport { getWeather } from \"../API/api-services\";\nimport DropDown from \"./share/dropdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Panel\n} = Collapse;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nconst CurrentWeatherForcst = () => {\n  _s();\n\n  const [curentItem, setCurentItem] = useState([\"current\"]);\n  const [dailyItem, setDailyItem] = useState([]);\n  const [header, setHeader] = useState(\"current\");\n  const [location, setLocation] = useState(\"\");\n  const [cloudes, setCloudes] = useState(\"\");\n  const [temp, setTemp] = useState(\"\");\n  const [windSpeed, setwindSpeed] = useState(\"\");\n  const [sunset, setSunset] = useState(\"\");\n  const [sunrise, setSunrise] = useState(\"\"); // const [dailyData, setDailyDate] = useState(\"\");\n  // const [currWeatherData, setcurrWeatherData] = useState(\"\");\n\n  const [dailyWeatherData, setcurrdailyWeatherData] = useState(\"\");\n\n  const callbackForMenu = data => {\n    if (data.key === \"weekly\") {\n      setHeader(data.key);\n    } else if (data.key === \"current\") {\n      setHeader(data.key);\n      navigator.geolocation.getCurrentPosition(success, error);\n    } else {\n      setHeader(\"Daily\"); // setDailyDate(data.key);\n\n      let relatedNoOfDay = getArrayIndexForDay(data.key);\n      let event1 = new Date(dailyWeatherData[relatedNoOfDay].sunrise);\n      let event2 = new Date(dailyWeatherData[relatedNoOfDay].sunset);\n      setTemp(Math.round(dailyWeatherData[relatedNoOfDay].temp.max));\n      setCloudes(dailyWeatherData[relatedNoOfDay].clouds);\n      setwindSpeed(dailyWeatherData[relatedNoOfDay].wind_speed);\n      setSunrise(event1.toLocaleTimeString(\"en-US\"));\n      setSunset(event2.toLocaleTimeString(\"en-US\"));\n    }\n  };\n\n  const GetDaYForDalilyData = (n, d) => {\n    let day;\n\n    switch (n) {\n      case 0:\n        day = \"Sunday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 1:\n        day = \"Monday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 2:\n        day = \"Tuesday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 3:\n        day = \"Wednesday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 4:\n        day = \"Thursday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 5:\n        day = \"Friday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n\n      case 6:\n        day = \"Saturday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n    }\n  };\n\n  const getArrayIndexForDay = data => {\n    if (data.includes(\"Sunday\")) {\n      return 0;\n    } else if (data.includes(\"Monday\")) {\n      return 1;\n    } else if (data.includes(\"Tuesday\")) {\n      return 2;\n    } else if (data.includes(\"Wednesday\")) {\n      return 3;\n    } else if (data.includes(\"Thursday\")) {\n      return 4;\n    } else if (data.includes(\"Friday\")) {\n      return 5;\n    } else if (data.includes(\"Saturday\")) {\n      return 6;\n    }\n  };\n\n  const success = position => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    let ItemArray = [];\n    let queryParams = {};\n    queryParams.lat = latitude;\n    queryParams.lon = longitude;\n    let d;\n    let n;\n    let day;\n    let event1;\n    let event2;\n    getWeather(queryParams).then(response => {\n      setLocation(response.data.timezone);\n      response.data.daily.forEach((result, i) => {\n        d = new Date(result.dt * 1000);\n        n = d.getDay();\n        day = GetDaYForDalilyData(n, d);\n\n        if (i !== 7) {\n          ItemArray.push(day);\n        }\n      });\n\n      if (header === \"current\") {\n        event1 = new Date(response.data.current.sunrise);\n        event2 = new Date(response.data.current.sunset);\n        setDailyItem(ItemArray);\n        setTemp(Math.round(response.data.current.temp));\n        setCloudes(response.data.current.clouds);\n        setwindSpeed(response.data.current.wind_speed);\n        setSunrise(event1.toLocaleTimeString(\"en-US\"));\n        setSunset(event2.toLocaleTimeString(\"en-US\"));\n      }\n\n      setcurrdailyWeatherData(response.data.daily);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const error = () => {\n    alert(\"Unable to retrieve your location\");\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(success, error);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DropDown, {\n      DropDownText: \"Current\",\n      Item: curentItem,\n      callbackForMenu: data => {\n        callbackForMenu(data);\n      }\n    }, \"current\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n      DropDownText: \"Daily\",\n      Item: dailyItem,\n      callbackForMenu: data => {\n        callbackForMenu(data);\n      }\n    }, \"daily\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n      DropDownText: \"Weekly\",\n      Item: [\"weekly\"],\n      callbackForMenu: data => {\n        callbackForMenu(data);\n      }\n    }, \"weekly\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      onChange: callback,\n      children: header === \"current\" ? /*#__PURE__*/_jsxDEV(Panel, {\n        header: header[0].toUpperCase() + header.slice(1).toLowerCase(),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"temp\" + \" \" + temp + \"C\" + \"  \" + \"Cloude\" + \" \" + cloudes + \"  \" + \"Sunrise\" + \" \" + sunrise + \"  \" + \"Sunset\" + \"  \" + sunset + \"  \" + \"wind Speed\" + \"  \" + windSpeed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)\n      }, \"2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this) : header === \"weekly\" ? dailyWeatherData.map(result => {\n        return /*#__PURE__*/_jsxDEV(Panel, {\n          header: GetDaYForDalilyData(new Date(result.dt * 1000), new Date(result.dt * 1000).getDay()),\n          header: header[0].toUpperCase() + header.slice(1).toLowerCase(),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"temp\" + \" \" + result.temp.max + \"C\" + \"  \" + \"Cloude\" + \" \" + result.clouds + \"  \" + \"Sunrise\" + \" \" + new Date(result.sunrise).toLocaleTimeString(\"en-US\") + \"  \" + \"Sunset\" + \"  \" + new Date(result.sunset).toLocaleTimeString(\"en-US\") + \"  \" + \"wind Speed\" + \"  \" + result.wind_speed\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this)\n        }, result.temp.max, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(Panel, {\n        header: header[0].toUpperCase() + header.slice(1).toLowerCase(),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"temp\" + \" \" + temp + \"C\" + \"  \" + \"Cloude\" + \" \" + cloudes + \"  \" + \"Sunrise\" + \" \" + sunrise + \"  \" + \"Sunset\" + \"  \" + sunset + \"  \" + \"wind Speed\" + \"  \" + windSpeed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)\n      }, \"2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CurrentWeatherForcst, \"Xv/MQc7YEfqseN4EDVXyBHrqoAY=\");\n\n_c = CurrentWeatherForcst;\nexport default CurrentWeatherForcst;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentWeatherForcst\");","map":{"version":3,"sources":["/home/nupur/Desktop/weather_portal/src/component/weatherForcast.js"],"names":["React","useEffect","useState","Collapse","getWeather","DropDown","Panel","callback","key","console","log","CurrentWeatherForcst","curentItem","setCurentItem","dailyItem","setDailyItem","header","setHeader","location","setLocation","cloudes","setCloudes","temp","setTemp","windSpeed","setwindSpeed","sunset","setSunset","sunrise","setSunrise","dailyWeatherData","setcurrdailyWeatherData","callbackForMenu","data","navigator","geolocation","getCurrentPosition","success","error","relatedNoOfDay","getArrayIndexForDay","event1","Date","event2","Math","round","max","clouds","wind_speed","toLocaleTimeString","GetDaYForDalilyData","n","d","day","String","getDate","padStart","includes","position","latitude","coords","longitude","ItemArray","queryParams","lat","lon","then","response","timezone","daily","forEach","result","i","dt","getDay","push","current","catch","alert","toUpperCase","slice","toLowerCase","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Collapse } from \"antd\";\nimport { getWeather } from \"../API/api-services\";\nimport DropDown from \"./share/dropdown\";\nconst { Panel } = Collapse;\nfunction callback(key) {\n  console.log(key);\n}\n\nconst CurrentWeatherForcst = () => {\n  const [curentItem, setCurentItem] = useState([\"current\"]);\n  const [dailyItem, setDailyItem] = useState([]);\n  const [header, setHeader] = useState(\"current\");\n  const [location, setLocation] = useState(\"\");\n  const [cloudes, setCloudes] = useState(\"\");\n  const [temp, setTemp] = useState(\"\");\n  const [windSpeed, setwindSpeed] = useState(\"\");\n  const [sunset, setSunset] = useState(\"\");\n  const [sunrise, setSunrise] = useState(\"\");\n  // const [dailyData, setDailyDate] = useState(\"\");\n\n  // const [currWeatherData, setcurrWeatherData] = useState(\"\");\n  const [dailyWeatherData, setcurrdailyWeatherData] = useState(\"\");\n\n  const callbackForMenu = (data) => {\n   if(data.key === \"weekly\") {\n      setHeader(data.key);\n    }else if(data.key === \"current\") {\n        setHeader(data.key);\n        navigator.geolocation.getCurrentPosition(success, error);\n    }else{\n        setHeader(\"Daily\");\n        // setDailyDate(data.key);\n        let relatedNoOfDay = getArrayIndexForDay(data.key);\n        let event1 = new Date(dailyWeatherData[relatedNoOfDay].sunrise);\n        let event2 = new Date(dailyWeatherData[relatedNoOfDay].sunset);\n        setTemp(Math.round(dailyWeatherData[relatedNoOfDay].temp.max));\n        setCloudes(dailyWeatherData[relatedNoOfDay].clouds);\n        setwindSpeed(dailyWeatherData[relatedNoOfDay].wind_speed);\n        setSunrise(event1.toLocaleTimeString(\"en-US\"));\n        setSunset(event2.toLocaleTimeString(\"en-US\"));\n    }\n  };\n\n  const GetDaYForDalilyData = (n, d) => {\n    let day;\n    switch (n) {\n      case 0:\n        day = \"Sunday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 1:\n        day = \"Monday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 2:\n        day = \"Tuesday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 3:\n        day = \"Wednesday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 4:\n        day = \"Thursday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 5:\n        day = \"Friday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n      case 6:\n        day = \"Saturday\" + \" \" + String(d.getDate()).padStart(2, \"0\");\n        return day;\n    }\n  };\n\n  const getArrayIndexForDay = (data) => {\n    if (data.includes(\"Sunday\")) {\n      return 0;\n    } else if (data.includes(\"Monday\")) {\n      return 1;\n    } else if (data.includes(\"Tuesday\")) {\n      return 2;\n    } else if (data.includes(\"Wednesday\")) {\n      return 3;\n    } else if (data.includes(\"Thursday\")) {\n      return 4;\n    } else if (data.includes(\"Friday\")) {\n      return 5;\n    } else if (data.includes(\"Saturday\")) {\n      return 6;\n    }\n  };\n\n  const success = (position) => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    let ItemArray = [];\n    let queryParams = {};\n    queryParams.lat = latitude;\n    queryParams.lon = longitude;\n    let d;\n    let n;\n    let day;\n    let event1;\n    let event2;\n    getWeather(queryParams)\n      .then((response) => {\n        setLocation(response.data.timezone);\n        response.data.daily.forEach((result, i) => {\n          d = new Date(result.dt * 1000);\n          n = d.getDay();\n          day = GetDaYForDalilyData(n, d);\n          if (i !== 7) {\n            ItemArray.push(day);\n          }\n        });\n\n        if (header === \"current\") {\n          event1 = new Date(response.data.current.sunrise);\n          event2 = new Date(response.data.current.sunset);\n\n          setDailyItem(ItemArray);\n          setTemp(Math.round(response.data.current.temp));\n          setCloudes(response.data.current.clouds);\n          setwindSpeed(response.data.current.wind_speed);\n          setSunrise(event1.toLocaleTimeString(\"en-US\"));\n          setSunset(event2.toLocaleTimeString(\"en-US\"));\n        }\n        setcurrdailyWeatherData(response.data.daily);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  const error = () => {\n    alert(\"Unable to retrieve your location\");\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(success, error);\n  }, []);\n\n  return (\n    <>\n      <DropDown\n        key=\"current\"\n        DropDownText=\"Current\"\n        Item={curentItem}\n        callbackForMenu={(data) => {\n          callbackForMenu(data);\n        }}\n      />\n      <DropDown\n        key=\"daily\"\n        DropDownText=\"Daily\"\n        Item={dailyItem}\n        callbackForMenu={(data) => {\n          callbackForMenu(data);\n        }}\n      />\n      <DropDown\n        key=\"weekly\"\n        DropDownText=\"Weekly\"\n        Item={[\"weekly\"]}\n        callbackForMenu={(data) => {\n          callbackForMenu(data);\n        }}\n      />\n      <h3>{location}</h3>\n\n      <Collapse onChange={callback}>\n        {header === \"current\" ? (\n          <Panel\n            header={header[0].toUpperCase() + header.slice(1).toLowerCase()}\n            key=\"2\"\n          >\n            <p>\n              {\"temp\" +\n                \" \" +\n                temp +\n                \"C\" +\n                \"  \" +\n                \"Cloude\" +\n                \" \" +\n                cloudes +\n                \"  \" +\n                \"Sunrise\" +\n                \" \" +\n                sunrise +\n                \"  \" +\n                \"Sunset\" +\n                \"  \" +\n                sunset +\n                \"  \" +\n                \"wind Speed\" +\n                \"  \" +\n                windSpeed}\n            </p>\n          </Panel>\n        ) : header === \"weekly\" ? (\n          dailyWeatherData.map((result) => {\n            return (\n              <Panel\n                header = {GetDaYForDalilyData(new Date(result.dt * 1000), new Date(result.dt * 1000).getDay())} \n                header={header[0].toUpperCase() + header.slice(1).toLowerCase()}\n                key={result.temp.max}\n              >\n                <p>\n                  {\"temp\" +\n                    \" \" +\n                    result.temp.max +\n                    \"C\" +\n                    \"  \" +\n                    \"Cloude\" +\n                    \" \" +\n                    result.clouds +\n                    \"  \" +\n                    \"Sunrise\" +\n                    \" \"\n                     +\n                    \n                    new Date(result.sunrise).toLocaleTimeString(\"en-US\")\n                    +\n                    \"  \" +\n                    \"Sunset\" +\n                    \"  \" +\n                    new Date(result.sunset).toLocaleTimeString(\"en-US\")\n                    +\n                    \"  \" +\n                    \"wind Speed\" +\n                    \"  \" +\n                    result.wind_speed}\n                </p>\n              </Panel>\n            );\n          })\n        ) : (\n          <Panel\n            header={header[0].toUpperCase() + header.slice(1).toLowerCase()}\n            key=\"2\"\n          >\n            <p>\n              {\"temp\" +\n                \" \" +\n                temp +\n                \"C\" +\n                \"  \" +\n                \"Cloude\" +\n                \" \" +\n                cloudes +\n                \"  \" +\n                \"Sunrise\" +\n                \" \" +\n                sunrise +\n                \"  \" +\n                \"Sunset\" +\n                \"  \" +\n                sunset +\n                \"  \" +\n                \"wind Speed\" +\n                \"  \" +\n                windSpeed}\n            </p>\n          </Panel>\n        )}\n      </Collapse>\n    </>\n  );\n};\nexport default CurrentWeatherForcst;\n"]},"metadata":{},"sourceType":"module"}